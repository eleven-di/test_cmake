name: Android Cross-Compile

on: [push, pull_request]

jobs:
  build-android:
    runs-on: ubuntu-22.04
    env:
      FILE_URL: https://public-slch.s3.ap-southeast-1.amazonaws.com/ollvm-v2.zip
      EXPECTED_SHA256: d48cf3ff36b75212b590863105260a9e05cbf446ad14f71ad2ba5519934b055e
      TARGET_PATH: toolchains/llvm/prebuilt/linux-x86_64  # 替换目标路径
    strategy:
      matrix: 
        abi: [arm64-v8a]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip ninja-build
        
        # 安装最新版 CMake (可选但建议)
        wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | sudo gpg --dearmor -o /usr/share/keyrings/kitware-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
        sudo apt-get update
        sudo apt-get install -y cmake

    # 2. 创建缓存键（基于文件 URL 和校验值）
    - name: Generate cache key
      id: cache-key
      run: |
        # 创建唯一的缓存键
        CACHE_KEY="ndk-file-$(echo $FILE_URL | sha256sum | cut -d' ' -f1)"
        echo "cache_key=$CACHE_KEY" >> $GITHUB_OUTPUT

    # 3. 缓存大文件
    - name: Cache large file
      uses: actions/cache@v3
      id: file-cache
      with:
        path: large_file.zip
        key: ${{ steps.cache-key.outputs.cache_key }}-${{ env.EXPECTED_SHA256 }}
        restore-keys: |
          ${{ steps.cache-key.outputs.cache_key }}-

    # 4. 下载文件（如果缓存未命中）
    - name: Download large file
      if: steps.file-cache.outputs.cache-hit != 'true'
      run: |
        # 使用 aria2 多线程下载（需要先安装）
        sudo apt-get install -y aria2
        aria2c -x 16 -s 16 "$FILE_URL" -o large_file.zip
        
        # 验证文件完整性
        echo "$EXPECTED_SHA256  large_file.zip" | sha256sum -c
      timeout-minutes: 30  # 增加超时时间

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android NDK
      run: |
        # 创建 Android SDK 目录
        mkdir -p $HOME/android-sdk
        
        # 下载命令行工具
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -O cmdline-tools.zip
        unzip -q cmdline-tools.zip -d $HOME/android-sdk/cmdline-tools
        mv $HOME/android-sdk/cmdline-tools/cmdline-tools $HOME/android-sdk/cmdline-tools/latest
        
        # 设置环境变量
        echo "ANDROID_HOME=$HOME/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$HOME/android-sdk" >> $GITHUB_ENV
        echo "$HOME/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        
        # 接受许可 (使用新安装的Java 17)
        yes | $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses --sdk_root=$HOME/android-sdk
        
        # 安装指定版本的 NDK
        $HOME/android-sdk/cmdline-tools/latest/bin/sdkmanager --sdk_root=$HOME/android-sdk "ndk;25.2.9519653"
        echo "ANDROID_NDK_ROOT=$HOME/android-sdk/ndk/25.2.9519653" >> $GITHUB_ENV

        # 6. 替换 NDK 文件
    - name: Replace NDK files
      run: |
        # 创建临时目录
        TEMP_DIR=$(mktemp -d)
        unzip -q large_file.zip -d "$TEMP_DIR"
        
        # 替换文件（使用 rsync 保留权限）
        sudo rsync -av --delete "$TEMP_DIR/" "$ANDROID_NDK_ROOT/$TARGET_PATH/"
        find $ANDROID_NDK_ROOT/$TARGET_PATH/ -type d -exec chmod 755 {} \;
        find $ANDROID_NDK_ROOT/$TARGET_PATH/ -type f -exec chmod 644 {} \;
        # 清理临时文件
        rm -rf "$TEMP_DIR"
        rm -f large_file.zip
        
    # 后续步骤保持不变...
    - name: Configure and Build
      run: |
        mkdir build && cd build
        
        # 根据 ABI 选择配置
        if [ "${{ matrix.abi }}" = "arm64-v8a" ]; then
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ matrix.abi }} \
            -DANDROID_NDK=$ANDROID_NDK_ROOT \
            -DANDROID_PLATFORM=android-21 \
            -DSTATIC_LIB_PATH=../jni/static-libs/arm64-v8a
        else
          cmake .. \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_ROOT/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=${{ matrix.abi }} \
            -DANDROID_NDK=$ANDROID_NDK_ROOT \
            -DANDROID_PLATFORM=android-16 \
            -DSTATIC_LIB_PATH=../jni/static-libs/armeabi-v7a
        fi
        
        cmake --build . -- -j$(nproc)

    - name: Collect artifacts
      run: |
        mkdir -p artifacts/${{ matrix.abi }}
        find build -name '*.so' -exec cp {} artifacts/${{ matrix.abi }} \;
        cp -r jni/src/include artifacts/
        # cp -r jni/static-libs artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-libs
        path: artifacts